#define KECCAK_PRIVATE_API
#include "keccak.h"

#include "keccak/constructions/sponge.h"
#include "keccak/fips202/flags.h"
#include "keccak/modes/hash/hash-impl.h"
#include "libutil/libutil.h"

#include <stdint.h>
#include <stdlib.h>
/*py:
shakes = [128, 256]
shake_sb = zip(shakes, [x//8 for x in shakes])
*/

/*% for s, b in shake_sb */
int shake`s`_init(register keccak_sponge* const restrict sponge) {
  return _hash_init(sponge, 200 - (`b` * 2), flag_shake`s` ^ hash_absorbing);
}

int shake`s`_update(register keccak_sponge* const restrict sponge,
                   register const uint8_t* const restrict in,
                   register const size_t inlen) {
  return _hash_update(sponge, in, inlen, flag_shake`s` ^ hash_absorbing);
}

int shake`s`_digest(register keccak_sponge* const restrict sponge,
                   register uint8_t* const restrict out,
                   register const size_t outlen) {
  int err = 0;
  if (sponge->flags == (flag_shake`s` ^ hash_absorbing)) {
    err |= _hash_finalize(
        sponge, pad_shake, flag_shake`s` ^ hash_absorbing, flag_shake`s` ^ hash_squeezing);
  } else if (sponge->flags != (flag_shake`s` ^ hash_squeezing)) {
    err |= -1;
  }
  err |= _hash_squeeze(sponge, out, outlen, flag_shake`s` ^ hash_squeezing);

  return err;
}

/*@ requires \valid(out+(0..outlen-1));
    requires \valid(in+(0..inlen-1));
    requires inlen < RSIZE_MAX;
    requires outlen < RSIZE_MAX;
    assigns out+(0..outlen-1);
    ensures \result == 0;
*/
int shake`s`(register uint8_t* const restrict out,
            register const size_t outlen,
            register const uint8_t* const restrict in,
            register const size_t inlen) {
  keccak_sponge sponge;
  int err = 0;
  err = shake`s`_init(&sponge);
  //@ assert(err == 0);
  err = shake`s`_update(&sponge, in, inlen);
  //@ assert(err == 0);
  err = shake`s`_digest(&sponge, out, outlen);
  //@ assert(err == 0);
  state_scribble(&sponge);
  return err;
}

/*% endfor */
